{% extends 'knp_menu.html.twig' %}

{% block root %}
    <ul class="list-unstyled">
        {{ block('list') -}}
    </ul>
{% endblock %}

{% block label %}
    {% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}

{% endblock %}

{% block list %}
    <!-- {{ _self }}::list -->
{#    {{  }}#}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {%- set attributes = item.linkAttributes %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
{#        {%- set classes = classes|merge(['list xxlist-unstyled']) %}#}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {% import _self as knp_menu %}
            {{ block('children') }}
    {% endif %}
{% endblock %}

{% block collablibleList %}
    <!-- {{ _self }}::collablibleList -->
    {#    {{ knp_menu.attributes(listAttributes) }} #}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {%- set attributes = item.linkAttributes %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : ['x'] %}

{#        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class'), 'list xxlist-unstyled nav-item'] : ['list xxlist-unstyled nav-item'] %}#}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}

        {% set classes = classes|merge( (matcher.isAncestor(item) or matcher.isCurrent(item)) ? ['show'] : ['collapse']) %}
        {%- set attributes = attributes|merge({'class':  classes|join(' ')}) %}
        {% import _self as knp_menu %}

        <div class="multi-level {{ matcher.isAncestor(item)  or matcher.isCurrent(item) ? 'show' : 'collapse' }}" role="list"  id="collapse_{{ item.name|u.snake }}" {{ knp_menu.attributes(attributes) }}>
            <ul class="flex-column nav list-unstyled">
                {% for child in item.children %}
                <li class="nav-item ">
                    <a class="nav-link collapsed {{ matcher.isCurrent(child) ? 'active' }}" href="{{ child.uri}}">
                        <span class="sidebar-text ">{{ child.label }}</span>
                    </a>
                </li>
                {% endfor %}
            </ul>
        </div>

    {% endif %}
{% endblock %}

{# this is the root link of something that can be collapsed #}
{% block collapsibleItem %}

    {% import "knp_menu.html.twig" as macros %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
    {%- set classes = classes|merge(['show', 'nav-item',  'justify-content-between', 'd-flex']) %}

    {% if  matcher.isCurrent(item)%}
        {%- set classes = classes|merge(['selected-menu', 'nav-link',]) %}
    {% endif %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {#    {%- set attributes = attributes|merge({'data-toggle': 'collapse'}) %}#}
    {%- set attributes = attributes|merge({'role': 'list'}) %}
    {%- set attributes = attributes|merge({'data-bs-toggle': 'collapse'}) %}
    {%- set attributes = attributes|merge({'data-bs-target': "#collapse_" ~ itemSlug} ) %}
    {#    {%- set attributes = attributes|merge({'data-accordion': 'false'}) %}#}
{#    {%- set attributes = attributes|merge({'data-bs-accordion': 'false'}) %}#}


    <li class="nav-item">

    <div
            class="nav-link collapsed d-flex justify-content-between align-items-center"
            data-bs-toggle="collapse" data-bs-target="#collapse_{{ itemSlug }}">
        <div>
            <span class="sidebar-icon"><span class="far fa-file-alt"></span></span>
            <span class="sidebar-text">{{ block('label') }}</span>
        </div>
        <div class="link-arrow"><span class="fas fa-chevron-right"></span></div>
    </div>
    {{ block('collablibleList') }}
    </li>

{% endblock %}

{% block old  %}
    <div {{ macros.attributes(attributes) }}>
        <a class="nav-link"  >
            <div>
                <span class="sidebar-icon">
            {% if item.attribute('icon') is not empty  %}
                <span class="{{ item.attribute('icon') }}">
                    </span>
            {% endif %}

                </span>
                <span class="sidebar-text">
                                {{ block('label') }}

        </span>
            </div>

        </a>
        <div class="link-arrow"><span class="fas fa-chevron-right"></span></div>
        {{ block('collablibleList') }}


    </div>
{% endblock %}

{% block item %}
    <!-- {{ _self }}::item -->

    {% if item.displayed %}
        {%- set is_collapsable = item.hasChildren and item.parent  %} {# was attributes.collapsable|default(false) %} #}
        {%- set itemSlug = item.name|u.snake %}

        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}

        {# displaying the item #}
        {% import _self as knp_menu %}
        {% set attributes = {'class': 'nav-item'} %}

        {%- if is_collapsable %}
            <!-- calling {{ _self }}::collapsibleItem -->

            {{ block('collapsibleItem') }}
        {%- else %}
            <!-- calling {{ _self }}::link|span Element -->
            <li {{ knp_menu.attributes(attributes) }}>
            {% if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}

            {# render the list of children#}

            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
            </li>
        {%- endif %}
    {% endif %}
{% endblock %}
