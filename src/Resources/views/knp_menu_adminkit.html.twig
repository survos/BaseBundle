{% extends 'knp_menu.html.twig' %}

{% block root %}
    <ul class="sidebar-nav sidebar-content">
        {% set listAttributes = item.childrenAttributes %}
        {{ block('list') -}}
    </ul>
{% endblock %}

{% block list %}
    <!-- {{ _self }}::list -->
    {#    {{  }}#}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {%- set attributes = item.linkAttributes %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
        {#        {%- set classes = classes|merge(['list xxlist-unstyled']) %}#}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {% import _self as knp_menu %}
        {{ block('children') }}
    {% endif %}
{% endblock %}

{% macro badges(item) %}
    {% import _self as selfMacros %}
    {% if item.getExtra('badge') is not null %}
        {{ selfMacros.badge(item.getExtra('badge')) }}
    {% elseif item.getExtra('badges') is not null %}
{#        {% for badge in item.getExtra('badges') %}#}
{#            {{ selfMacros.badge(badge) }}#}
{#        {% endfor %}#}
    {% endif %}
{% endmacro %}

{% macro badge(badge) %}
    <span class="sidebar-badge badge bg-primary">{{ badge }}</span>
{#    <span class="right badge badge-{{ badge.color|default('success') }}">{{ badge.value }}</span>#}
{% endmacro %}


{% block item %}
    {% if item.displayed %}
    {%- set attributes = item.attributes %}
    {%- set is_collapsable = item.hasChildren and item.parent  %} {# was attributes.collapsable|default(false) %} #}
    {%- set itemSlug = item.name|u.snake %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')]  : [] %}



        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}

        {# displaying the item #}
        {% import _self as knp_menu %}
    {%- if is_collapsable %}
{#        <!-- calling {{ _self }}::collapsibleItem -->#}

        {{ block('collapsibleItem') }}
    {%- else %}
        <!-- calling {{ _self }}::link|span Element -->
{#        <li {{ knp_menu.attributes(attributes) }}>#}
        {% if attributes['style']|default('') == 'heading' %}
        <li class="sidebar-header">{{item.label|raw}}</li>
            {% else %}
        <li class="sidebar-item {{ matcher.isCurrent(item) ? 'active' }}">
            <a class="sidebar-link" href="{{ item.uri }}">
                {{ _self.icon(item) }}
                <span class="align-middle">{{ item.label|raw }}</span>
                {{ _self.badges(item) }}
            </a>
{#            {{ dump(item.extras) }}#}
        </li>
                {% endif %}
{#            {% if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}#}
{#                {{ block('linkElement') }}#}
{#            {%- else %}#}
{#                {{ block('spanElement') }}#}
{#            {%- endif %}#}

{#            #}{# render the list of children#}

{#            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}#}
{#            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}#}
{#            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}#}
{#            {{ block('list') }}#}
    {% endif %}
    {% endif %}


{% endblock %}

{% macro icon(item) %}
                {# bug here with attributes.icon already having double-quotes #}
                {% if item.attribute('icon') is not empty  %}
                    <span class="{{ item.attribute('icon') }}"></span>
                {% endif %}
        <i class="align-left" {{ item.attribute('feather')|default(false) ? 'data-feather=%s'|format(item.attribute('feather')) }}></i>
{% endmacro %}

            {# this is the root link of something that can be collapsed #}
            {% block collapsibleItem %}

            {% import "knp_menu.html.twig" as macros %}
            {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
            {%- set classes = classes|merge(['show', 'sidebar-header']) %}

            {% if  matcher.isCurrent(item)%}
                {%- set classes = classes|merge(['selected-menu', 'nav-link',]) %}
            {% endif %}
            {%- set attributes = item.linkAttributes %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
            {#    {%- set attributes = attributes|merge({'data-toggle': 'collapse'}) %}#}
            {%- set attributes = attributes|merge({'role': 'list'}) %}
            {%- set attributes = attributes|merge({'data-bs-toggle': 'collapse'}) %}
            {%- set attributes = attributes|merge({'data-bs-target': "#" ~ itemSlug} ) %}
            {#    {%- set attributes = attributes|merge({'data-accordion': 'false'}) %}#}
            {#    {%- set attributes = attributes|merge({'data-bs-accordion': 'false'}) %}#}
                {% import _self as knp_menu %}
                <li class="sidebar-item {{ matcher.isCurrent(item) ? 'active' }}">

                    <a href="#{{ itemSlug }}" data-bs-target="#{{ itemSlug }}" data-toggle="collapse" data-bs-toggle="collapse" class="sidebar-link">
                        {{ _self.icon(item) }}
                        <span class="align-middle">{{ item.label }}</span>
                    </a>
                    <ul id="{{ itemSlug }}" class="sidebar-dropdown list-unstyled  {{ not matcher.isAncestor(item) ? 'collapse' }} " data-parent="#sidebar">
                        {{ block('collablibleList') }}
                    </ul>
                </li>


{% endblock %}

{% block collablibleList %}
    <!-- {{ _self }}::collablibleList -->
    {#    {{ knp_menu.attributes(listAttributes) }} #}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {%- set attributes = item.linkAttributes %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : ['x'] %}

        {#        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class'), 'list xxlist-unstyled nav-item'] : ['list xxlist-unstyled nav-item'] %}#}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}

        {% set classes = classes|merge( (matcher.isAncestor(item) or matcher.isCurrent(item)) ? ['show'] : ['collapse']) %}
        {%- set attributes = attributes|merge({'class':  classes|join(' ')}) %}
        {% import _self as knp_menu %}

                {% for child in item.children %}
{#                    <li class="sidebar-item"><a class="sidebar-link" href="pages-sign-in.html">Sign In</a></li>#}
{#                    <li class="sidebar-item"><a class="sidebar-link" href="pages-sign-up.html">Sign Up</a></li>#}

                    <li class="sidebar-item {{ matcher.isCurrent(child) ? 'active' }} ">
                        <a class="sidebar-link " href="{{ child.uri}}">
                            {% if item.attribute('feather-icon') is not empty %}
                                <i class="align-middle" {{ item.attribute('feather-icon') is not empty ? 'data-feather="%s"'|format(item.attribute('feather-icon'))}}></i>
                                <span class="align-middle">{{ child.label }}</span>
                            {% else %}
                                <span class="align-left">{{ child.label }}</span>
                            {% endif %}
                        </a>
                    </li>
                {% endfor %}

    {% endif %}
{% endblock %}
